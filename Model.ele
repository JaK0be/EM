one sig Ignition {
	var keyState : one KeyState
}
enum KeyState { NoKeyInserted, KeyInserted, KeyInIgnitionOnPosition }

one sig PitmanArm {
	var heightState : one HeightPitmanArmState,
	var deepState : one DeepPitmanArmState
}
enum HeightPitmanArmState { Neutral, Downward5, Downward7, Upward5, Upward7}
enum DeepPitmanArmState { Neutro,Backward,Frontward}

one sig HazardWarningSwitch{
	var state : one HazardWarningSwitchState
}
enum HazardWarningSwitchState { On,Off }

one sig Brake{
	var state : one BrakeState
}
enum BrakeState { None, Normal, Full }

one sig ReverseGear {
	var state : one ReverseGearState
}
enum ReverseGearState{ NotEngaged, Engaged }

abstract sig Light {}
one sig blinkLeft, blinkRight,
		lowBeamLeft, lowBeamRight,
		sideBrakeLights, middleBrakeLight,
		reverseLight extends Light {}

one sig highBeamLights extends Light {
	var pattern : one highBeamPattern
}
enum highBeamPattern { AlwaysOff, Temporary, AlwaysOn }

var sig LightOn in Light {}

// predicados que representam transições

pred putKeyOnIgnition {-- Não limitei o comportamento dos "piscas" pois estes podem ser ligados em qualquer instante
	Ignition.keyState = NoKeyInserted
	Ignition.keyState' = KeyInserted
	LightOn' = LightOn
	PitmanArm.heightState' = PitmanArm.heightState
	PitmanArm.deepState' = PitmanArm.deepState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	highBeamsPattern
}

pred putKeyOnPosition {-- Não limitei o comportamento dos "piscas" pois estes podem ser ligados em qualquer instante
	Ignition.keyState = KeyInserted
	Ignition.keyState' = KeyInIgnitionOnPosition
	LightOn' = LightOn
	PitmanArm.heightState' = PitmanArm.heightState
	PitmanArm.deepState' = PitmanArm.deepState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	highBeamsPattern
}

pred blinkLeft5 {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Downward5
	LightOn' = LightOn + blinkLeft - blinkRight
	PitmanArm.deepState' = PitmanArm.deepState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	highBeamsPattern
}

pred blinkLeft7 {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Downward7
	LightOn' = LightOn + blinkLeft - blinkRight
	PitmanArm.deepState' = PitmanArm.deepState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	highBeamsPattern
}

pred blinkRight5 {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Upward5
	LightOn' = LightOn + blinkRight - blinkLeft
	PitmanArm.deepState' = PitmanArm.deepState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	highBeamsPattern
}

pred blinkRight7 {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Upward7
	LightOn' = LightOn + blinkRight - blinkLeft
	PitmanArm.deepState' = PitmanArm.deepState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	highBeamsPattern
}

pred pitmanBackward {	
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState = Neutro
	PitmanArm.deepState' = Backward
	highBeamLights.pattern' = AlwaysOn
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanBackwardOff {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState' = Backward
	PitmanArm.deepState = Neutro
	highBeamLights.pattern' = AlwaysOff
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanFrontward {	
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState = Neutro
	PitmanArm.deepState' = Frontward
	highBeamLights.pattern' = Temporary
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanFrontwardOff {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState' = Frontward
	PitmanArm.deepState = Neutro
	highBeamLights.pattern' = AlwaysOff
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred skip {
	LightOn' = LightOn
	keyState' = keyState
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	highBeamsPattern
}

pred hazard{
	HazardWarningSwitch.state = Off
	HazardWarningSwitch.state' = On
	LightOn' = LightOn + (blinkRight + blinkLeft)
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	highBeamsPattern
}

pred reverse{
	ReverseGear.state = NotEngaged 
	ReverseGear.state' = Engaged
	LightOn' = LightOn + reverseLight
	keyState' = keyState
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	highBeamsPattern
}

pred outReverse{
	ReverseGear.state = Engaged 
	ReverseGear.state' = NotEngaged
	LightOn' = LightOn - reverseLight
	keyState' = keyState
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	highBeamsPattern
}

pred normalBraking{
	Brake.state = None
	Brake.state' = Normal
	LightOn' = LightOn + (sideBrakeLights + middleBrakeLight)
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	highBeamsPattern
}

pred fullBraking{
	Brake.state = None
	Brake.state' = Full
	LightOn' = LightOn + (sideBrakeLights + middleBrakeLight) //A middleBrakeLight necessita de estar a piscar
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	highBeamsPattern
}

// estado inicial e transições

fact init {
	Ignition.keyState = NoKeyInserted
	PitmanArm.deepState = Neutro
	PitmanArm.heightState = Neutral
	HazardWarningSwitch.state = Off
	ReverseGear.state = NotEngaged
	Brake.state = None
	no LightOn
	highBeamLights.pattern = AlwaysOff
}

fact transitions {
	always (
		putKeyOnIgnition or putKeyOnPosition or
		blinkLeft5 or blinkLeft7 or blinkRight5 or blinkRight7 or hazard or
		reverse or outReverse or
		normalBraking or fullBraking or
		pitmanBackward or pitmanBackwardOff or
		pitmanFrontward or pitmanFrontwardOff or
		skip
		) and pitman
}

// outros factos

fact lights {
	always (
		highBeamLights.pattern in (Temporary + AlwaysOn) implies highBeamLights in LightOn
	)
}

// predicados auxiliares

pred highBeamsPattern {
	highBeamLights.pattern != Temporary implies highBeamLights.pattern' = highBeamLights.pattern
	highBeamLights.pattern = Temporary implies highBeamLights.pattern' != AlwaysOn
}

pred pitman {
	PitmanArm.heightState in HeightPitmanArmState - (Upward5 + Downward5) implies PitmanArm.heightState' = PitmanArm.heightState
	PitmanArm.heightState in Upward5 + Downward5 implies PitmanArm.heightState' = Neutral
}

/*
fact { --Para existirem luzes ligadas é necessário a ignição estar ligada
	always ((some LightOn) implies Ignition.keyState = KeyInIgnitionOnPosition)
}*/

// ambiente de execução

/*
assert A {
	always ((blinkLeft in LightOn) implies
		(Ignition.keyState = KeyInIgnitionOnPosition or
			HazardWarningSwitch.state=On or
			ReverseGear.state=Engaged or
			Brake.state!=None))
}*/

assert B {
	always (
		(blinkLeft in LightOn and blinkRight not in LightOn) implies once (PitmanArm.heightState = Downward5 or PitmanArm.heightState = Downward7 ) --or HazardWarningSwitch.state=On)
	)
}

assert C {
	always (
		(blinkRight in LightOn and blinkLeft not in LightOn) implies once (PitmanArm.heightState = Upward5 or PitmanArm.heightState = Upward7 ) --or HazardWarningSwitch.state=On)
	)
}

assert D {
	always (
		(blinkLeft in LightOn and blinkRight in LightOn) implies (HazardWarningSwitch.state=On)
	)
}

//run {eventually pitmanBackward}

run{eventually pitmanFrontward}

//run { eventually some LightOn and (eventually reverse) }
