one sig Ignition {
	var keyState : one KeyState
}
enum KeyState { NoKeyInserted, KeyInserted, KeyInIgnitionOnPosition }

one sig PitmanArm {
	var heightState : one HeightPitmanArmState,
	var deepState : one DeepPitmanArmState
}

enum HeightPitmanArmState { Neutral, Downward7, Upward7}
enum DeepPitmanArmState { Neutro,Backward,Forward}

one sig HazardWarningSwitch{
	var state : one HazardWarningSwitchState
}
enum HazardWarningSwitchState { On,Off }

one sig Brake{
	var state : one BrakeState
}
enum BrakeState { None, Normal, Full }

one sig ReverseGear {
	var state : one ReverseGearState
}
enum ReverseGearState{ NotEngaged, Engaged }

abstract sig Light {}
one sig blinkLeft, blinkRight,
		highBeamLights,
		sideBrakeLights,
		reverseLight extends Light {}

one sig middleBrakeLight extends Light {
	var pattern : one middleBrakeLightPattern
}

enum middleBrakeLightPattern { MBL_Off, MBL_On}

one sig turnLight {
	var pattern : one TurnLightPattern
}

enum TurnLightPattern { TL_On, TL_Off }

var sig LightOn in Light {}

// predicados que representam transições

pred putKeyOnIgnition {-- Não limitei o comportamento dos "piscas" pois estes podem ser ligados em qualquer instante
	Ignition.keyState = NoKeyInserted
	Ignition.keyState' = KeyInserted
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}

pred putKeyOnPosition {-- Não limitei o comportamento dos "piscas" pois estes podem ser ligados em qualquer instante
	Ignition.keyState = KeyInserted
	Ignition.keyState' = KeyInIgnitionOnPosition
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}

pred blinkLeft7 {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Downward7
	PitmanArm.deepState' = PitmanArm.deepState
	turnLight.pattern' = TL_On
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}

pred blinkRight7 {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Upward7
	PitmanArm.deepState' = PitmanArm.deepState
	turnLight.pattern' = TL_On
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}

pred pitmanBackward {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState = Neutro
	PitmanArm.deepState' = Backward
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight)
}

pred pitmanBackwardOff {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState' = Backward
	PitmanArm.deepState = Neutro
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight)
}

pred pitmanForward {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState = Neutro
	PitmanArm.deepState' = Forward
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight)
}

pred pitmanForwardOff {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState' = Forward
	PitmanArm.deepState = Neutro
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	LightOn' - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (highBeamLights + blinkLeft + blinkRight + middleBrakeLight)
}


pred skip {
	keyState' = keyState
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}

pred hazard{
	HazardWarningSwitch.state = Off
	HazardWarningSwitch.state' = On
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}

pred hazardOff {
	HazardWarningSwitch.state = On
	HazardWarningSwitch.state' = Off
	(blinkRight + blinkLeft) not in LightOn'
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (blinkLeft + blinkRight + middleBrakeLight)
}


pred reverse{
	ReverseGear.state = NotEngaged 
	ReverseGear.state' = Engaged
	reverseLight in LightOn'
	keyState' = keyState
	Brake.state' = Brake.state
	HazardWarningSwitch.state = HazardWarningSwitch.state'
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (reverseLight + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (reverseLight + blinkLeft + blinkRight + middleBrakeLight)
}

pred outReverse{
	ReverseGear.state = Engaged 
	ReverseGear.state' = NotEngaged
	reverseLight not in LightOn'
	keyState' = keyState
	Brake.state' = Brake.state
	HazardWarningSwitch.state = HazardWarningSwitch.state'
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (reverseLight + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (reverseLight + blinkLeft + blinkRight + middleBrakeLight)
}

pred normalBraking{
	Brake.state = None
	Brake.state' = Normal
	sideBrakeLights in LightOn'
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	HazardWarningSwitch.state = HazardWarningSwitch.state'
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (sideBrakeLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (sideBrakeLights + blinkLeft + blinkRight + middleBrakeLight)
}

pred fullBraking{
	Brake.state != Full
	Brake.state' = Full
	sideBrakeLights in LightOn' //A middleBrakeLight necessita de estar a piscar
	middleBrakeLight.pattern' = MBL_On
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	HazardWarningSwitch.state = HazardWarningSwitch.state'
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (sideBrakeLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (sideBrakeLights + blinkLeft + blinkRight + middleBrakeLight)
}

pred stopBraking {
	Brake.state in (Full + Normal)
	Brake.state' = None
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	HazardWarningSwitch.state = HazardWarningSwitch.state'
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	LightOn' - (sideBrakeLights + blinkLeft + blinkRight + middleBrakeLight) =
		LightOn - (sideBrakeLights + blinkLeft + blinkRight + middleBrakeLight)
}

// estado inicial e transições

fact init {
	Ignition.keyState = NoKeyInserted
	PitmanArm.deepState = Neutro
	PitmanArm.heightState = Neutral
	HazardWarningSwitch.state = Off
	ReverseGear.state = NotEngaged
	Brake.state = None
	no LightOn
}

fact transitions {
	always (
		putKeyOnIgnition or putKeyOnPosition or
		blinkLeft7 or blinkRight7 or hazard or
		reverse or outReverse or
		normalBraking or fullBraking or stopBraking or
		pitmanBackward or pitmanBackwardOff or
		pitmanForward or pitmanForwardOff or
		skip
		)
}

// outros factos

fact lights {
	always (
		PitmanArm.deepState in (Forward + Backward) implies highBeamLights in LightOn and
		HazardWarningSwitch.state = On implies ((blinkLeft + blinkRight) in LightOn)
	)
}

// blinking middle brake light
fact {
	always (
		(not fullBraking implies (middleBrakeLight.pattern = MBL_On implies middleBrakeLight.pattern' = MBL_Off) and
		(middleBrakeLight.pattern = MBL_Off implies middleBrakeLight.pattern' = MBL_On)) and
		middleBrakeBlink in LightOn and (middleBrakeBlink = none implies middleBrakeLight not in LightOn)
	)
}

fun middleBrakeBlink : some middleBrakeLight {
	(middleBrakeLight.pattern = MBL_On and Brake.state = Full) implies middleBrakeLight else none
}

// blinking turn lights
fact {
	always (
		(not (blinkLeft7 or blinkRight7 or hazard) implies (turnLight.pattern = TL_On implies turnLight.pattern' = TL_Off) and
		(turnLight.pattern = TL_Off implies turnLight.pattern' = TL_On)) and
		turnLightsBlink in LightOn and ((blinkLeft + blinkRight) - turnLightsBlink not in LightOn or HazardWarningSwitch.state = On) and
		(HazardWarningSwitch.state = On implies (blinkLeft + blinkRight) in LightOn) and
		(PitmanArm.deepState in (Forward + Backward) implies highBeamLights in LightOn)
	)
}

fun turnLightsBlink : some (blinkLeft + blinkRight) {
	(turnLight.pattern = TL_On and PitmanArm.heightState = Downward7) implies blinkLeft else
	(turnLight.pattern = TL_On and PitmanArm.heightState = Upward7) implies blinkRight else
	none
}

// predicados auxiliares

pred pitman {
	{}//PitmanArm.heightState in HeightPitmanArmState - (Upward5 + Downward5) implies PitmanArm.heightState' = PitmanArm.heightState
	//PitmanArm.heightState in Upward5 + Downward5 implies PitmanArm.heightState' = Neutral
}

/*
fact { --Para existirem luzes ligadas é necessário a ignição estar ligada
	always ((some LightOn) implies Ignition.keyState = KeyInIgnitionOnPosition)
}*/

// ambiente de execução

run{eventually normalBraking}

//run { eventually some LightOn and (eventually reverse) }
