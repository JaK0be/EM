one sig Ignition {
	var keyState : one KeyState
}
enum KeyState { NoKeyInserted, KeyInserted, KeyInIgnitionOnPosition }

one sig PitmanArm {
	var heightState : one HeightPitmanArmState,
	var deepState : one DeepPitmanArmState
}

enum HeightPitmanArmState { Neutral, Downward5, Downward7, Upward5, Upward7}
enum DeepPitmanArmState { Neutro,Backward,Forward}

one sig HazardWarningSwitch{
	var state : one HazardWarningSwitchState
}
enum HazardWarningSwitchState { On,Off }

one sig Brake{
	var state : one BrakeState
}
enum BrakeState { None, Normal, Full }

one sig ReverseGear {
	var state : one ReverseGearState
}
enum ReverseGearState{ NotEngaged, Engaged }

abstract sig Light {}
one sig blinkLeft, blinkRight,
		highBeamLights,
		sideBrakeLights,
		reverseLight extends Light {}

one sig middleBrakeLight extends Light {
	var pattern : one middleBrakeLightPattern
}

enum middleBrakeLightPattern { MBL_Off, MBL_On}

var sig LightOn in Light {}

// predicados que representam transições

pred putKeyOnIgnition {-- Não limitei o comportamento dos "piscas" pois estes podem ser ligados em qualquer instante
	Ignition.keyState = NoKeyInserted
	Ignition.keyState' = KeyInserted
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	pitman
}

pred putKeyOnPosition {-- Não limitei o comportamento dos "piscas" pois estes podem ser ligados em qualquer instante
	Ignition.keyState = KeyInserted
	Ignition.keyState' = KeyInIgnitionOnPosition
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	pitman
}

pred blinkLeft5 {
	Ignition.keyState = KeyInIgnitionOnPosition
	blinkLeft in LightOn'
	blinkRight not in LightOn'
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Downward5
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred blinkLeft7 {
	Ignition.keyState = KeyInIgnitionOnPosition
	blinkLeft in LightOn'
	blinkRight not in LightOn'
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Downward7
	LightOn' = LightOn + blinkLeft - blinkRight
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred blinkRight5 {
	Ignition.keyState = KeyInIgnitionOnPosition
	blinkRight in LightOn'
	blinkLeft not in LightOn'
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Upward5
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred blinkRight7 {
	Ignition.keyState = KeyInIgnitionOnPosition
	blinkRight in LightOn'
	blinkLeft not in LightOn'
	PitmanArm.heightState = Neutral
	PitmanArm.heightState' = Upward7
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanBackward {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState = Neutro
	PitmanArm.deepState' = Backward
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanBackwardOff {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState' = Backward
	PitmanArm.deepState = Neutro
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanForward {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState = Neutro
	PitmanArm.deepState' = Forward
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}

pred pitmanForwardOff {
	Ignition.keyState = KeyInIgnitionOnPosition
	PitmanArm.deepState' = Forward
	PitmanArm.deepState = Neutro
	PitmanArm.heightState' = PitmanArm.heightState
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	HazardWarningSwitch.state' = HazardWarningSwitch.state
}


pred skip {
	keyState' = keyState
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	HazardWarningSwitch.state' = HazardWarningSwitch.state
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	pitman
}

pred hazard{
	HazardWarningSwitch.state = Off
	HazardWarningSwitch.state' = On
	(blinkRight + blinkLeft) in LightOn'
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	pitman
}

pred hazardOff {
	HazardWarningSwitch.state = On
	HazardWarningSwitch.state' = Off
	(blinkRight + blinkLeft) not in LightOn'
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	pitman
}


pred reverse{
	ReverseGear.state = NotEngaged 
	ReverseGear.state' = Engaged
	reverseLight in LightOn'
	keyState' = keyState
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	pitman
}

pred outReverse{
	ReverseGear.state = Engaged 
	ReverseGear.state' = NotEngaged
	reverseLight not in LightOn'
	keyState' = keyState
	Brake.state' = Brake.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	pitman
}

pred normalBraking{
	Brake.state = None
	Brake.state' = Normal
	sideBrakeLights in LightOn'
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	pitman
}

pred fullBraking{
	Brake.state != Full
	Brake.state' = Full
	sideBrakeLights in LightOn' //A middleBrakeLight necessita de estar a piscar
	middleBrakeLight.pattern' = MBL_On
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	//middleBrakeLight.pattern' = MBL_Blinking_On
	pitman
}

pred stopBraking {
	Brake.state in (Full + Normal)
	Brake.state' = None
	keyState' = keyState
	ReverseGear.state' = ReverseGear.state
	PitmanArm.deepState' = PitmanArm.deepState
	PitmanArm.heightState' = PitmanArm.heightState
	pitman
}

// estado inicial e transições

fact init {
	Ignition.keyState = NoKeyInserted
	PitmanArm.deepState = Neutro
	PitmanArm.heightState = Neutral
	HazardWarningSwitch.state = Off
	ReverseGear.state = NotEngaged
	Brake.state = None
	no LightOn
}

fact transitions {
	always (
		putKeyOnIgnition or putKeyOnPosition or
		blinkLeft5 or blinkLeft7 or blinkRight5 or blinkRight7 or hazard or
		reverse or outReverse or
		normalBraking or fullBraking or stopBraking or
		pitmanBackward or pitmanBackwardOff or
		pitmanForward or pitmanForwardOff or
		skip
		)
}

// outros factos

fact lights {
	always (
		PitmanArm.deepState in (Forward + Backward) implies highBeamLights in LightOn and
		//Brake.state = None implies not middleBrakeLight in LightOn and
		//Brake.state = Normal implies middleBrakeLight in LightOn and
		//Brake.state = Full implies ((
		//	(middleBrakeLight not in LightOn implies middleBrakeLight in LightOn') and
		//	(middleBrakeLight in LightOn implies middleBrakeLight not in LightOn')) until Brake.state != Full)
		//middleBrakeLight.pattern in (MBL_Off + MBL_Blinking_Off) implies middleBrakeLight not in LightOn and
		//middleBrakeLight.pattern in (MBL_On + MBL_Blinking_On) implies middleBrakeLight in LightOn and
		//middleBrakeLight.pattern = MBL_Blinking_On implies (middleBrakeLight in LightOn until
		//	(after (middleBrakeLight.pattern = MBL_Blinking_Off or middleBrakeLight.pattern = MBL_Off))) and
		//middleBrakeLight.pattern = MBL_Off iff Brake.state = None and
		//middleBrakeLight.pattern = MBL_On iff Brake.state = Normal and
		//(middleBrakeLight.pattern = MBL_Blinking_On implies middleBrakeLight.pattern' = MBL_Blinking_Off and 
		//middleBrakeLight.pattern = MBL_Blinking_Off implies middleBrakeLight.pattern' = MBL_Blinking_On)
		//ReverseGear.state = Engaged implies reverseLight in LightOn  and	
		//reverseLight not in LightOn iff ReverseGear.state = NotEngaged
		(not (reverse or outReverse)) implies (reverseLight in LightOn iff reverseLight in LightOn') and
		(not (normalBraking or fullBraking)) implies (sideBrakeLights in LightOn iff sideBrakeLights in LightOn')
	)
}

// blinking middle brake light
fact {
	always (
		(not fullBraking implies (middleBrakeLight.pattern = MBL_On implies middleBrakeLight.pattern' = MBL_Off) and
		(middleBrakeLight.pattern = MBL_Off implies middleBrakeLight.pattern' = MBL_On)) and
		middleBrakeBlink in LightOn and (middleBrakeBlink = none implies middleBrakeLight not in LightOn)
	)
}

fun middleBrakeBlink : some middleBrakeLight {
	(middleBrakeLight.pattern = MBL_On and Brake.state = Full) implies middleBrakeLight else none
}

// predicados auxiliares

pred pitman {
	PitmanArm.heightState in HeightPitmanArmState - (Upward5 + Downward5) implies PitmanArm.heightState' = PitmanArm.heightState
	PitmanArm.heightState in Upward5 + Downward5 implies PitmanArm.heightState' = Neutral
}

/*
fact { --Para existirem luzes ligadas é necessário a ignição estar ligada
	always ((some LightOn) implies Ignition.keyState = KeyInIgnitionOnPosition)
}*/

// ambiente de execução

/*
assert A {
	always ((blinkLeft in LightOn) implies
		(Ignition.keyState = KeyInIgnitionOnPosition or
			HazardWarningSwitch.state=On or
			ReverseGear.state=Engaged or
			Brake.state!=None))
}*/

assert B {
	always (
		(blinkLeft in LightOn and blinkRight not in LightOn) implies once (PitmanArm.heightState = Downward5 or PitmanArm.heightState = Downward7 ) --or HazardWarningSwitch.state=On)
	)
}

assert C {
	always (
		(blinkRight in LightOn and blinkLeft not in LightOn) implies once (PitmanArm.heightState = Upward5 or PitmanArm.heightState = Upward7 ) --or HazardWarningSwitch.state=On)
	)
}

assert D {
	always (
		(blinkLeft in LightOn and blinkRight in LightOn) implies (HazardWarningSwitch.state=On)
	)
}

check D
//run{eventually (fullBraking and (eventually middleBrakeLight.pattern = MBL_Off))}

run{eventually fullBraking and eventually stopBraking}

//run { eventually some LightOn and (eventually reverse) }
