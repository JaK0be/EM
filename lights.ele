one sig Ignition {
	var keyState : one KeyState
}
enum KeyState { NoKeyInserted, KeyInserted, KeyInIgnitionOnPosition }

one sig PitmanArm {
	var state : one PitmanArmState
}
enum PitmanArmState { Neutral, Downward5, Downward7, Upward5, Upward7/*, Backward, Frontward*/ }

one sig HazardWarningSwitch{
	var state : one HazardWarningSwitchState
}
enum HazardWarningSwitchState { On,Off }

one sig Brake{
	var state : one BrakeState
}
enum BrakeState { No, Normal, Full }

one sig ReverseGear {
	var state : one ReverseGearState
}
enum ReverseGearState{ NotEngaged, Engaged }

abstract sig Light {}
one sig blinkLeft, blinkRight,
		lowBeamLeft, lowBeamRight,
		brakeLight, tailLamp, reverseLight extends Light {}

var sig LightOn in Light {}

fact {
	always ((some LightOn) implies Ignition.keyState = KeyInIgnitionOnPosition)
}

fact {
	always (
		blinkLeft in LightOn implies once (PitmanArm.state = Downward5 or PitmanArm.state = Downward7)
	)
}

fact {
	always (
		blinkRight in LightOn implies once (PitmanArm.state = Upward5 or PitmanArm.state = Upward7)
	)
}

/*
pred turnOn[l : Light] {
	not l in LightOn
	LightOn' = LightOn + l
	keyState' = keyState
}

pred turnOff[l : Light] {
	l in LightOn
	LightOn' - l = LightOn
	keyState' = keyState
}
*/

pred putKeyOnIgnition {
	Ignition.keyState = NoKeyInserted
	Ignition.keyState' = KeyInserted
	LightOn' = LightOn
}

pred putKeyOnPosition {
	Ignition.keyState = KeyInserted
	Ignition.keyState' = KeyInIgnitionOnPosition
	LightOn' = LightOn
}

pred blinkLeft5 {
	PitmanArm.state = Neutral
	PitmanArm.state' = Downward5
	LightOn' = LightOn + blinkLeft - blinkRight
	keyState' = keyState
}

pred blinkLeft7 {
	PitmanArm.state = Neutral
	PitmanArm.state' = Downward7
	LightOn' = LightOn + blinkLeft - blinkRight
	keyState' = keyState
}

pred blinkRight5 {
	PitmanArm.state = Neutral
	PitmanArm.state' = Upward5
	LightOn' = LightOn + blinkRight - blinkLeft
	keyState' = keyState
}

pred blinkRight7 {
	PitmanArm.state = Neutral
	PitmanArm.state' = Upward7
	LightOn' = LightOn + blinkRight - blinkLeft
	keyState' = keyState
}


pred skip {
	LightOn' = LightOn
	keyState' = keyState
}

fact init {
	Ignition.keyState = NoKeyInserted
	PitmanArm.state = Neutral
	HazardWarningSwitch.state = Off
	ReverseGear.state = NotEngaged 
}

pred pitman {
	PitmanArm.state in PitmanArmState - (Upward5 + Downward5) implies PitmanArm.state' = PitmanArm.state
	PitmanArm.state in Upward5 + Downward5 implies PitmanArm.state' = Neutral
}

pred hazard{
	HazardWarningSwitch.state = Off
	HazardWarningSwitch.state' = On
	LightOn' = LightOn + (blinkRight + blinkLeft)
	keyState' = keyState
}

pred reverse{
	ReverseGear.state = NotEngaged 
	ReverseGear.state' = Engaged
	LightOn' = LightOn + tailLamp
	keyState' = keyState	
}

fact transitions {
	always (
		putKeyOnIgnition or putKeyOnPosition or
		blinkLeft5 or blinkLeft7 or blinkRight5 or blinkRight7 or
		hazard or reverse or
		skip
		) and pitman
}

run { eventually some LightOn and (eventually reverse) }
